#include "../src/utils/aes_core.h"
#include "../src/utils/aes_host.h"
#include "../src/utils/safe_allocator.hpp"
#include <iostream>

int main() {
	bool test_failed = false;
	AESOpenCL acc;
	// AES 128
	set_aes_parameters(128);
	crypto::safe_vector<uint8_t> aes_key = {
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
	};
	crypto::safe_vector<uint8_t> round_keys;
	crypto::safe_vector<uint8_t> plain_text = {
		0x32, 0x43, 0xf6, 0xa8,
		0x88, 0x5a, 0x30, 0x8d,
		0x31, 0x31, 0x98, 0xa2,
		0xe0, 0x37, 0x07, 0x34
	};
	crypto::safe_vector<uint8_t> cipher_text(aes_key.size());
	crypto::safe_vector<uint8_t> exp_cypher_text = {
		0x39, 0x25, 0x84, 0x1d,
		0x02, 0xdc, 0x09, 0xfb,
		0xdc, 0x11, 0x85, 0x97,
		0x19, 0x6a, 0x0b, 0x32
	};

	round_keys = key_schedule(aes_key);
	acc.aes_encrypt(plain_text, cipher_text, round_keys);
	/*for (auto byte : cipher_text) {
		std::cout << std::hex << static_cast<int>(byte) << " ";
	}
	std::cout << std::endl;*/
	if (cipher_text == exp_cypher_text) {
		std::cout << "Test 1 passato" << std::endl;
	}
	else {
		std::cout << "Test 1 Fallito" << std::endl;
		test_failed = true;
	}

	// AES 128
	plain_text = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
	  0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
	};

	aes_key = {
		0x2b, 0x7e, 0x15, 0x16,
		0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88,
		0x09, 0xcf, 0x4f, 0x3c
	};
	cipher_text.clear();
	cipher_text.resize(plain_text.size());
	exp_cypher_text = {
		0x3a, 0xd7, 0x7b, 0xb4,
		0x0d, 0x7a, 0x36, 0x60,
		0xa8, 0x9e, 0xca, 0xf3,
		0x24, 0x66, 0xef, 0x97
	};
	round_keys = key_schedule(aes_key);
	acc.aes_encrypt(plain_text, cipher_text, round_keys);
	if (cipher_text == exp_cypher_text) {
		std::cout << "Test 2 passato" << std::endl;
	}
	else {
		std::cout << "Test 2 Fallito" << std::endl;
		test_failed = true;
	}

	// AES 192
	set_aes_parameters(192);
	aes_key = {
		0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13,
		0x14, 0x15, 0x16, 0x17
	};

	plain_text = {
		0x00, 0x11, 0x22, 0x33,
		0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb,
		0xcc, 0xdd, 0xee, 0xff
	};
	cipher_text.clear();
	cipher_text.resize(plain_text.size());
	exp_cypher_text = {
		0xdd, 0xa9, 0x7c, 0xa4,
		0x86, 0x4c, 0xdf, 0xe0,
		0x6e, 0xaf, 0x70, 0xa0,
		0xec, 0x0d, 0x71, 0x91
	};
	round_keys = key_schedule(aes_key);
	acc.aes_encrypt(plain_text, cipher_text, round_keys);
	if (cipher_text == exp_cypher_text) {
		std::cout << "Test 3 passato" << std::endl;
	}
	else {
		std::cout << "Test 3 Fallito" << std::endl;
		test_failed = true;
	}

	// AES 256
	set_aes_parameters(256);
	aes_key = {
		0x00, 0x01, 0x02, 0x03,
		0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b,
		0x0c, 0x0d, 0x0e, 0x0f,
		0x10, 0x11, 0x12, 0x13,
		0x14, 0x15, 0x16, 0x17,
		0x18, 0x19, 0x1a, 0x1b,
		0x1c, 0x1d, 0x1e, 0x1f
	};

	plain_text = {
		0x00, 0x11, 0x22, 0x33,
		0x44, 0x55, 0x66, 0x77,
		0x88, 0x99, 0xaa, 0xbb,
		0xcc, 0xdd, 0xee, 0xff
	};
	cipher_text.clear();
	cipher_text.resize(plain_text.size());
	exp_cypher_text = {
		0x8e, 0xa2, 0xb7, 0xca,
		0x51, 0x67, 0x45, 0xbf,
		0xea, 0xfc, 0x49, 0x90,
		0x4b, 0x49, 0x60, 0x89
	};
	round_keys = key_schedule(aes_key);
	acc.aes_encrypt(plain_text, cipher_text, round_keys);
	if (cipher_text == exp_cypher_text) {
		std::cout << "Test 4 passato" << std::endl;
	}
	else {
		std::cout << "Test 4 Fallito" << std::endl;
		test_failed = true;
	}
	return test_failed;
}