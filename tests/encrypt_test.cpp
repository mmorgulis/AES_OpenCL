#include "../src/utils/aes_core.h"
#include "../src/utils/aes_host.h"
#include "../src/utils/safe_allocator.hpp"
#include <iostream>

// TEST VALUE
	/*
	uint8_t key[16] = {
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
	};
	aes_key.assign(key, key + 16); */

	/* Cipher attended
	3a d7 7b b4 0d 7a 36 60 a8 9e ca f3 24 66 ef 97
	*/

int main() {
	crypto::safe_vector<uint8_t> aes_key = {
		0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6,
		0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
	};
	crypto::safe_vector<uint8_t> round_keys;
	crypto::safe_vector<uint8_t> plain_text = {
		0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96,
		0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a
	};
	crypto::safe_vector<uint8_t> cipher_text;
	crypto::safe_vector<uint8_t> exp_cypher_text = {
		0x3a, 0xd7, 0x7b, 0xb4, 
		0x0d, 0x7a, 0x36, 0x60, 
		0xa8, 0x9e, 0xca, 0xf3,
		0x24, 0x66, 0xef, 0x97
	};

	key_schedule(aes_key, round_keys);
	if (!find_platforms(platform, device)) {
		throw std::runtime_error("No platforms detected");
	}
	aes_encrypt(plain_text, cipher_text, round_keys);
	
}